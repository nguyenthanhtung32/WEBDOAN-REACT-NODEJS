// // import React from "react";
// // import Link from "next/link";
// // import Head from "next/head";
// // import axiosClient from "../../libraries/axiosClient";

// // export default function ProductDetail(props) {
// //   const { products } = props;

// //   return (
// //     <>
// //       <Head>
// //         <title>Products</title>
// //         <meta name="description" content="Generated by create next app" />
// //         <meta name="viewport" content="width=device-width, initial-scale=1" />
// //         <link rel="icon" href="/favicon.ico" />
// //       </Head>

// //       <ul>
// //         {
// //           products?.length > 0 && (
// //             products.map((item, idx) => <li key={item._id} className="mb-2">
// //               <Link href={`/products/${item._id}`}>
// //                 <strong>{`${idx + 1}: ${item.name}`}</strong>
// //               </Link>
// //             </li>)
// //           )
// //         }
// //       </ul>
// //     </>
// //   );
// // }


// // export async function getStaticProps() {
// //   try {
// //     const response = await axiosClient.get('/products');

// //     return {
// //       props: {
// //         products: response.data,
// //       },
// //       revalidate: 24 * 60 * 60,
// //     };
// //   } catch (error) {
// //     return {
// //       notFound: true,
// //     };
// //   }
// // }

// import { Button, Card, Col, Input, message, Row } from "antd";
// import axios from "../../libraries/axiosClient";
// import React, { useState, useEffect } from "react";
// import { useRouter } from "next/router";

// import numeral from "numeral";

// const apiName = "/products";

// const initialState = {
//   category: "",
//   stockStart: "",
//   stockEnd: "",
//   priceStart: "",
//   priceEnd: "",
//   discountStart: "",
//   discountEnd: "",
// };

// export default function Products() {
//   const [products, setProducts] = useState([]);
//   const router = useRouter();
//   const nameCategory = router.query.nameCategory;

//   const [filter, setFilter] = useState(initialState);

//   const onClickFilter = (description) => {
//     console.log("description", description);
//     router.push("/detail", {
//       query: {
//         productDetail: description,
//       },
//     });
//   };
//   const onChangeFilter = (e) => {
//     setFilter((prevState) => ({
//       ...prevState,
//       [e.target.name]: e.target.value,
//     }));
//   };

//   const callApi = (searchParams) => {
//     axios
//       .get(`${apiName}?${searchParams}`)
//       .then((response) => {
//         const { data } = response;
//         setProducts(data.payload);
//       })
//       .catch((err) => {
//         console.error(err);
//       });
//   };

//   const onSearch = () => {
//     const checkInputData = (input, name) => {
//       if ((input && isNaN(input)) || (input && input < 0)) {
//         message.error(`Dữ liệu nhập vào ô ${name} không hợp lệ!`);

//         return true;
//       }

//       return false;
//     };
//     // Kiểm tra dữ liệu nhập vào từng ô tìm kiếm
//     const isInvalidData =
//       checkInputData(filter.stockStart, "Tồn kho") ||
//       checkInputData(filter.stockEnd, "Tồn kho") ||
//       checkInputData(filter.priceStart, "Giá bán") ||
//       checkInputData(filter.priceEnd, "Giá bán") ||
//       checkInputData(filter.discountStart, "Giảm giá") ||
//       checkInputData(filter.discountEnd, "Giảm giá");

//     if (isInvalidData) return;
//     // Lọc các trường có giá trị để tạo query params
//     const filterFields = Object.keys(filter).filter(
//       (key) => filter[key] !== undefined && filter[key] !== ""
//     );

//     // Tạo query params từ các trường đã lọc
//     const a = filterFields.map((key) => {
//       return [key, filter[key]];
//     });
//     const b = ["productName", nameCategory];
//     a.push(b);
//     const searchParams = new URLSearchParams(a);

//     // Gọi API với các query params đã tạo
//     callApi(searchParams);
//   };

//   useEffect(() => {
//     if (nameCategory) {
//       axios
//         .get(`${apiName}?category=${nameCategory}`)
//         .then((response) => {
//           const { data } = response;
//           setProducts(data.payload);
//         })
//         .catch((err) => {
//           console.error(err);
//         });
//     }
//   }, [nameCategory]);

//   useEffect(() => {
//     if (nameCategory) {
//       axios
//         .get(`${apiName}?productName=${nameCategory}`)
//         .then((response) => {
//           const { data } = response;
//           setProducts(data.payload);
//         })
//         .catch((err) => {
//           console.error(err);
//         });
//     }
//   }, [nameCategory]);

//   return (
//     <div style={{ padding: 24, display: "flex" }}>
//       <div>
//         <h1>DANH MỤC</h1>
//         <Input
//           placeholder="Tồn kho thấp nhất"
//           name="stockStart"
//           value={filter.stockStart}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Input
//           placeholder="Tồn kho cao nhất"
//           name="stockEnd"
//           value={filter.stockEnd}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Input
//           placeholder="Giá thấp nhất"
//           name="priceStart"
//           value={filter.priceStart}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Input
//           placeholder="Giá cao nhất"
//           name="priceEnd"
//           value={filter.priceEnd}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Input
//           placeholder="Giảm giá thấp nhất"
//           name="discountStart"
//           value={filter.discountStart}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Input
//           placeholder="Giám giá cao nhất"
//           name="discountEnd"
//           value={filter.discountEnd}
//           onChange={onChangeFilter}
//           allowClear
//         />
//         <Button onClick={onSearch}>
//           Tìm Kiếm
//         </Button>
//       </div>
//       <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
//         {products.map((item) => (
//           <Col key={item._id} xs={24} sm={12} md={12} lg={12} xl={12}>
//             <Card
//               key={item._id}
//               title={item.name}
//               bordered={false}
//               style={{ width: 300, height: 400 }}
//               hoverable
//               onClick={() => {
//                 onClickFilter(item?.description);
//               }}
//               cover={
//                 <img
//                   alt=""
//                   style={{ width: "auto", height: 150, marginTop: 20}}
//                   src={item.img}
//                 />
//               }
//             >
//               <div style={{ display: "flex" }}>
//                 <strong>{item.description}</strong>
//               </div>
//               <div style={{ display: "flex", color: "#ff3300" }}>
//                 <span>
//                   Giá: <span>{numeral(item.price).format("0,0")}</span>
//                 </span>
//               </div>
//               <div style={{ display: "flex", color: "#ff3300" }}>
//                 <span>
//                   Giảm giá: <span>{numeral(item.discount).format("0,0")}%</span>
//                   ;
//                 </span>
//               </div>
//             </Card>
//           </Col>
//         ))}
//       </Row>
//     </div>
//   );
// }

import { Button, Card, Col, Input, message, Row } from "antd";
import axios from "../../libraries/axiosClient";
import React, { useState } from "react";
import { useRouter } from "next/router";
import numeral from "numeral";
import Link from "next/link";

const apiName = "/products";

const initialState = {
  category: "",
  stockStart: "",
  stockEnd: "",
  priceStart: "",
  priceEnd: "",
  discountStart: "",
  discountEnd: "",
};

export default function Products({ products }) {
  const router = useRouter();
  const nameCategory = router.query.nameCategory;

  const [filter, setFilter] = useState(initialState);

  // const onClickFilter = (description) => {
  //   router.push("/detail", {
  //     query: {
  //       productDetail: description,
  //     },
  //   });
  // };
  const onChangeFilter = (e) => {
    setFilter((prevState) => ({
      ...prevState,
      [e.target.name]: e.target.value,
    }));
  };

  const onSearch = () => {
    const checkInputData = (input, name) => {
      if ((input && isNaN(input)) || (input && input < 0)) {
        message.error(`Dữ liệu nhập vào ô ${name} không hợp lệ!`);

        return true;
      }

      return false;
    };
    // Kiểm tra dữ liệu nhập vào từng ô tìm kiếm
    const isInvalidData =
      checkInputData(filter.stockStart, "Tồn kho") ||
      checkInputData(filter.stockEnd, "Tồn kho") ||
      checkInputData(filter.priceStart, "Giá bán") ||
      checkInputData(filter.priceEnd, "Giá bán") ||
      checkInputData(filter.discountStart, "Giảm giá") ||
      checkInputData(filter.discountEnd, "Giảm giá");

    if (isInvalidData) return;
    // Lọc các trường có giá trị để tạo query params
    const filterFields = Object.keys(filter).filter(
      (key) => filter[key] !== undefined && filter[key] !== ""
    );

    // Tạo query params từ các trường đã lọc
    const a = filterFields.map((key) => {
      return [key, filter[key]];
    });
    const b = ["productName", nameCategory];
    a.push(b);
    const searchParams = new URLSearchParams(a);

    // Gọi API với các query params đã tạo
    axios
      .get(`${apiName}?${searchParams}`)
      .then((response) => {
        const { data } = response;
        setProducts(data.payload);
      })
      .catch((err) => {
        console.error(err);
      });
  };

  return (
    <div style={{ padding: 24, display: "flex" }}>
      <div>
        <h1>DANH MỤC</h1>
        <Input
          placeholder="Tồn kho thấp nhất"
          name="stockStart"
          value={filter.stockStart}
          onChange={onChangeFilter}
          allowClear
        />
        <Input
          placeholder="Tồn kho cao nhất"
          name="stockEnd"
          value={filter.stockEnd}
          onChange={onChangeFilter}
          allowClear
        />
        <Input
          placeholder="Giá thấp nhất"
          name="priceStart"
          value={filter.priceStart}
          onChange={onChangeFilter}
          allowClear
        />
        <Input
          placeholder="Giá cao nhất"
          name="priceEnd"
          value={filter.priceEnd}
          onChange={onChangeFilter}
          allowClear
        />
        <Input
          placeholder="Giảm giá thấp nhất"
          name="discountStart"
          value={filter.discountStart}
          onChange={onChangeFilter}
          allowClear
        />
        <Input
          placeholder="Giám giá cao nhất"
          name="discountEnd"
          value={filter.discountEnd}
          onChange={onChangeFilter}
          allowClear
        />
        <Button onClick={onSearch}>
          Tìm Kiếm
        </Button>
      </div>
      <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
        {products.map((item) => (
          <Col key={item._id} xs={24} sm={12} md={12} lg={12} xl={12}>
            <Link href={`/products/${item._id}`}>
              <Card
                key={item._id}
                title={item.name}
                bordered={false}
                style={{ width: 300, height: 400 }}
                hoverable
                // onClick={() => {
                //   onClickFilter(item?.description);
                // }}
                cover={
                  <img
                    alt=""
                    style={{ width: "auto", height: 150, marginTop: 20 }}
                    src={item.img}
                  />
                }
              >
                <div style={{ display: "flex" }}>
                  <strong>{item.description}</strong>
                </div>
                <div style={{ display: "flex", color: "#ff3300" }}>
                  <span>
                    Giá: <span>{numeral(item.price).format("0,0")}</span>
                  </span>
                </div>
                <div style={{ display: "flex", color: "#ff3300" }}>
                  <span>
                    Giảm giá: <span>{numeral(item.discount).format("0,0")}%</span>
                    ;
                  </span>
                </div>
              </Card>
            </Link>
          </Col>
        ))}
      </Row>
    </div>
  );
}

export async function getServerSideProps(context) {
  const nameCategory = context.params?.nameCategory;
  let { products} = context;
 
  try {
    if (nameCategory) {
      const response = await axios.get(`${apiName}?category=${nameCategory}`);
      products = response?.data?.payload || [];
    } else {
      const response = await axios.get(`${apiName}`);
      products = response?.data?.payload || [];
    }

    return {
      props: {
        products,
      },
    };
  } catch (e) {
    return {
      notFound: true,
    };
  }
}
